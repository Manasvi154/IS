1.caesor cipher
def caesar_cipher(text, shift, decrypt=False):
    result = ""
    for char in text:
        if char.isalpha():
            base = ord('a') if char.islower() else ord('A')
            shifted = (ord(char) - base + shift * (-1 if decrypt else 1)) % 26 + base
            result += chr(shifted)
        else:
            result += char
    return result

def main():
    
        plaintext = input("Enter the plaintext: ")
        shift = int(input("Enter the shift value: "))
        encrypted_text = caesar_cipher(plaintext, shift)
        print("Encrypted text:", encrypted_text)
    
        encrypted_text = input("Enter the encrypted text: ")
        shift = int(input("Enter the shift value: "))
        decrypted_text = caesar_cipher(encrypted_text, shift, decrypt=True)
        print("Decrypted text:", decrypted_text)
   

if __name__ == "__main__":
    main()




2.rail fence
# Railfence Cipher
def Railfence(key, textsize):
    counter = 0
    sign = "+"
    railfence = ""

    for i in range(textsize):
        counter = eval(f"{counter}{sign}1")
        railfence+=str(counter)
        if counter==key:
            sign='-'
        elif counter==1:
            sign='+'
    #print(railfence)
    return railfence

def encrypt(plaintext,key):
    textsize = len(plaintext)
    ciphertext = ""
    railfence = Railfence(key=key,textsize=textsize)

    for i in range(1,key+1):
        for char_i in range(textsize):
            if railfence[char_i]==f"{i}":
                ciphertext=ciphertext+plaintext[char_i]
    return ciphertext

def decrypt(ciphertext,key):
    textsize = len(ciphertext)
    plaintext = ""
    railfence = Railfence(key=key,textsize=textsize)

    antirailfence = sorted([index for index in railfence])
    #print(antirailfence)

    for char_i in range(textsize):
        for j in range(textsize):
            if railfence[char_i]==antirailfence[j]:
                ch = ciphertext[j]
                antirailfence[j]=0
                break
        plaintext+=ch
    return plaintext
    

plaintext = input("Enter a Plaintext: ")
key = int(input("Enter Key: "))

ciphertext = encrypt(plaintext=plaintext,key=key)

print("Encrypted text:",ciphertext)

print("Decrypted text:",decrypt(ciphertext=ciphertext,key=key))

//algo
function railFenceEncrypt(plainText, rails):
    fence = createEmptyFence(rails)
    direction = "down"
    row = 0
    
    for each character in plainText:
        fence[row] += character
        
        if direction is "down":
            row += 1
        else:
            row -= 1
        
        if row == rails - 1:
            direction = "up"
        elseif row == 0:
            direction = "down"
    
    cipherText = concatenateRows(fence)
    return cipherText

=======================================================================================

function railFenceDecrypt(cipherText, rails):
    fence = createFence(length(cipherText), rails)
    index = 0
    for rail in range(rails):
        for position in range(length(cipherText)):
            if fence[rail][position] != '-':
                fence[rail][position] = cipherText[index]
                index += 1
    plainText = ""
    direction = 1
    currentRow = 0
    for position in range(length(cipherText)):
        plainText += fence[currentRow][position]
        currentRow += direction
        if currentRow == 0 or currentRow == rails - 1:
            direction = -direction
    return plainText


3.plyfair
def generate_playfair_matrix(key):
       key = key.replace(" ", "").upper()
       alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
       matrix = []
       for char in key + alphabet:
           if char not in matrix:
               matrix.append(char)
       playfair_matrix = [matrix[i:i+5] for i in range(0, 25, 5)]
       return playfair_matrix

def find_char_positions(matrix, char):
       for i in range(5):
           for j in range(5):
               if matrix[i][j] == char:
                   return i, j

def encrypt_digraph(matrix, digraph):
       char1, char2 = digraph
       row1, col1 = find_char_positions(matrix, char1)
       row2, col2 = find_char_positions(matrix, char2)
       if row1 == row2:  # Same row
           return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
       elif col1 == col2:  # Same column
           return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
       else:  # Forming rectangle
           return matrix[row1][col2] + matrix[row2][col1]

def decrypt_digraph(matrix, digraph):
       char1, char2 = digraph
       row1, col1 = find_char_positions(matrix, char1)
       row2, col2 = find_char_positions(matrix, char2)
       if row1 == row2:  # Same row
           return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
       elif col1 == col2:  # Same column
           return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
       else:  # Forming rectangle
           return matrix[row1][col2] + matrix[row2][col1]

def playfair_encrypt(plaintext, key):
       matrix = generate_playfair_matrix(key)
       plaintext = plaintext.replace(" ", "").upper()
       plaintext = [plaintext[i:i+2] for i in range(0, len(plaintext), 2)]
       ciphertext = ""
       for digraph in plaintext:
           ciphertext += encrypt_digraph(matrix, digraph)
       return ciphertext

def playfair_decrypt(ciphertext, key):
       matrix = generate_playfair_matrix(key)
       ciphertext = ciphertext.replace(" ", "").upper()
       ciphertext = [ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)]
       plaintext = ""
       for digraph in ciphertext:
           plaintext += decrypt_digraph(matrix, digraph)
       return plaintext
key = "KEYWORD"
plaintext = "HELLO WORLD"
encrypted_text = playfair_encrypt(plaintext, key)
print("Encrypted:", encrypted_text)
decrypted_text = playfair_decrypt(encrypted_text, key)
print("Decrypted:", decrypted_text)



4.hill cipher
def generate_key_matrix(key):
    key = key.replace(" ", "").upper()
    key_len = len(key)
    matrix_dim = int(key_len ** 0.5)
    if matrix_dim ** 2 != key_len:
        raise ValueError("Key length is not a perfect square")

    key_matrix = [[0] * matrix_dim for _ in range(matrix_dim)]
    for i in range(matrix_dim):
        for j in range(matrix_dim):
            key_matrix[i][j] = ord(key[i * matrix_dim + j]) - 65

    return key_matrix

def determinant(matrix):
    if len(matrix) == 1:
        return matrix[0][0]
    elif len(matrix) == 2:
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
    else:
        det = 0
        for i in range(len(matrix)):
            det += ((-1) ** i) * matrix[0][i] * determinant(
                [row[:i] + row[i + 1:] for row in matrix[1:]]
            )
        return det

def mod_inverse(num, mod):
    for i in range(1, mod):
        if (num * i) % mod == 1:
            return i
    raise ValueError(f"No modular inverse for {num} mod {mod}")

def inverse_matrix(matrix, mod):
    det = determinant(matrix)
    det_inv = mod_inverse(det, mod)

    if len(matrix) == 1:
        return [[det_inv % mod]]
    adjugate = []
    for i in range(len(matrix)):
        adj_row = []
        for j in range(len(matrix)):
            minor = [row[:j] + row[j + 1:] for row in matrix[:i] + matrix[i + 1:]]
            adj_row.append(((-1) ** (i + j)) * determinant(minor))
        adjugate.append(adj_row)
    inverse = [[(num * det_inv) % mod for num in row] for row in adjugate]
    return inverse

def encrypt(plaintext, key):
    plaintext = plaintext.replace(" ", "").upper()
    plaintext_len = len(plaintext)
    key_matrix = generate_key_matrix(key)

    matrix_dim = len(key_matrix)
    if plaintext_len % matrix_dim != 0:
        padding = matrix_dim - (plaintext_len % matrix_dim)
        plaintext += "X" * padding
        plaintext_len += padding

    ciphertext = ""
    for i in range(0, plaintext_len, matrix_dim):
        block = [ord(char) - 65 for char in plaintext[i:i+matrix_dim]]
        encrypted_block = [sum(key_matrix[i][j] * block[j] for j in range(matrix_dim)) % 26 for i in range(matrix_dim)]
        ciphertext += ''.join([chr(num + 65) for num in encrypted_block])

    return ciphertext

def decrypt(ciphertext, key):
    ciphertext = ciphertext.replace(" ", "").upper()
    ciphertext_len = len(ciphertext)
    key_matrix = generate_key_matrix(key)

    matrix_dim = len(key_matrix)
    if ciphertext_len % matrix_dim != 0:
        raise ValueError("Ciphertext length is not divisible by key matrix dimension")

    plaintext = ""
    inv_key_matrix = inverse_matrix(key_matrix, 26)
    for i in range(0, ciphertext_len, matrix_dim):
        block = [ord(char) - 65 for char in ciphertext[i:i+matrix_dim]]
        decrypted_block = [sum(inv_key_matrix[i][j] * block[j] for j in range(matrix_dim)) % 26 for i in range(matrix_dim)]
        plaintext += ''.join([chr(num + 65) for num in decrypted_block])

    return plaintext

# Example usage:
key = "GYBNQKURP"
plaintext = "HELLO"
ciphertext = encrypt(plaintext, key)
print("Encrypted:", ciphertext)
decrypted_text = decrypt(ciphertext, key)
print("Decrypted:", decrypted_text)


5.vigener cipher
def vignere(text,key,mode="e"): 
    text,key=text.upper(),key.upper() 
    if mode=="d":
        k = -1
 
    elif mode=="e":
        k = 1 
    else:
        return
    output = [chr((ord(text[i])+(ord(key[i%len(key)])*k)+130)%26+65) for i in range(len(text))]
    return "".join(output)
plaintext = input("Enter the Plain Text: ") 
key = input("Enter the Key: ")
encrypted_text = vignere(text=plaintext,key=key,mode="e") 
print("Encrypted:", encrypted_text)
decrypted_text = vignere(text=encrypted_text,key=key,mode="d") 
print("Decrypted:", decrypted_text)



6.diffiee hellman
def power(a, b, mod):
    if b == 1:
        return a
    t = power(a, b // 2, mod)
    if b % 2 == 0:
        return (t * t) % mod
    else:
        return (((t * t) % mod) * a) % mod

def generate_key(g, x, n):
    return power(g, x, n)

def main():
    n = int(input("Enter the value of n (prime number): "))
    g = int(input("Enter the value of g (primitive root of n): "))

    print("User A:")
    x_a = int(input("Enter the private key for User A: "))
    public_key_a = generate_key(g, x_a, n)
    print("Public key for User A:", public_key_a)

    print("\nUser B:")
    x_b = int(input("Enter the private key for User B: "))
    public_key_b = generate_key(g, x_b, n)
    print("Public key for User B:", public_key_b)

    shared_key_a = generate_key(public_key_b, x_a, n)
    shared_key_b = generate_key(public_key_a, x_b, n)

    print("\nShared key for User A:", shared_key_a)
    print("Shared key for User B:", shared_key_b)

if __name__ == "__main__":
    main()

